// Code generated by capnpc-go. DO NOT EDIT.

package mesh

import (
	context "context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

type Neighbor struct{ Client *capnp.Client }

// Neighbor_TypeID is the unique identifier for the type Neighbor.
const Neighbor_TypeID = 0xe786f2ea35c6d7fb

func (c Neighbor) Walk(ctx context.Context, params func(Neighbor_walk_Params) error) (Neighbor_walk_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xe786f2ea35c6d7fb,
			MethodID:      0,
			InterfaceName: "mesh.capnp:Neighbor",
			MethodName:    "walk",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Neighbor_walk_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Neighbor_walk_Results_Future{Future: ans.Future()}, release
}

// A Neighbor_Server is a Neighbor with a local implementation.
type Neighbor_Server interface {
	Walk(context.Context, Neighbor_walk) error
}

// Neighbor_NewServer creates a new Server from an implementation of Neighbor_Server.
func Neighbor_NewServer(s Neighbor_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Neighbor_Methods(nil, s), s, c, policy)
}

// Neighbor_ServerToClient creates a new Client from an implementation of Neighbor_Server.
// The caller is responsible for calling Release on the returned Client.
func Neighbor_ServerToClient(s Neighbor_Server, policy *server.Policy) Neighbor {
	return Neighbor{Client: capnp.NewClient(Neighbor_NewServer(s, policy))}
}

// Neighbor_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Neighbor_Methods(methods []server.Method, s Neighbor_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xe786f2ea35c6d7fb,
			MethodID:      0,
			InterfaceName: "mesh.capnp:Neighbor",
			MethodName:    "walk",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Walk(ctx, Neighbor_walk{call})
		},
	})

	return methods
}

// Neighbor_walk holds the state for a server call to Neighbor.walk.
// See server.Call for documentation.
type Neighbor_walk struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Neighbor_walk) Args() Neighbor_walk_Params {
	return Neighbor_walk_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Neighbor_walk) AllocResults() (Neighbor_walk_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Neighbor_walk_Results{Struct: r}, err
}

type Neighbor_Returner struct{ Client *capnp.Client }

// Neighbor_Returner_TypeID is the unique identifier for the type Neighbor_Returner.
const Neighbor_Returner_TypeID = 0xd4e8260bae0ab2a2

func (c Neighbor_Returner) Return(ctx context.Context, params func(Neighbor_Returner_return_Params) error) (Neighbor_Returner_return_Results_Future, capnp.ReleaseFunc) {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xd4e8260bae0ab2a2,
			MethodID:      0,
			InterfaceName: "mesh.capnp:Neighbor.Returner",
			MethodName:    "return",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Neighbor_Returner_return_Params{Struct: s}) }
	}
	ans, release := c.Client.SendCall(ctx, s)
	return Neighbor_Returner_return_Results_Future{Future: ans.Future()}, release
}

// A Neighbor_Returner_Server is a Neighbor_Returner with a local implementation.
type Neighbor_Returner_Server interface {
	Return(context.Context, Neighbor_Returner_return) error
}

// Neighbor_Returner_NewServer creates a new Server from an implementation of Neighbor_Returner_Server.
func Neighbor_Returner_NewServer(s Neighbor_Returner_Server, policy *server.Policy) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Neighbor_Returner_Methods(nil, s), s, c, policy)
}

// Neighbor_Returner_ServerToClient creates a new Client from an implementation of Neighbor_Returner_Server.
// The caller is responsible for calling Release on the returned Client.
func Neighbor_Returner_ServerToClient(s Neighbor_Returner_Server, policy *server.Policy) Neighbor_Returner {
	return Neighbor_Returner{Client: capnp.NewClient(Neighbor_Returner_NewServer(s, policy))}
}

// Neighbor_Returner_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Neighbor_Returner_Methods(methods []server.Method, s Neighbor_Returner_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xd4e8260bae0ab2a2,
			MethodID:      0,
			InterfaceName: "mesh.capnp:Neighbor.Returner",
			MethodName:    "return",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Return(ctx, Neighbor_Returner_return{call})
		},
	})

	return methods
}

// Neighbor_Returner_return holds the state for a server call to Neighbor_Returner.return.
// See server.Call for documentation.
type Neighbor_Returner_return struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Neighbor_Returner_return) Args() Neighbor_Returner_return_Params {
	return Neighbor_Returner_return_Params{Struct: c.Call.Args()}
}

// AllocResults allocates the results struct.
func (c Neighbor_Returner_return) AllocResults() (Neighbor_Returner_return_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Neighbor_Returner_return_Results{Struct: r}, err
}

type Neighbor_Returner_return_Params struct{ capnp.Struct }

// Neighbor_Returner_return_Params_TypeID is the unique identifier for the type Neighbor_Returner_return_Params.
const Neighbor_Returner_return_Params_TypeID = 0xa032e07a3902231b

func NewNeighbor_Returner_return_Params(s *capnp.Segment) (Neighbor_Returner_return_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Neighbor_Returner_return_Params{st}, err
}

func NewRootNeighbor_Returner_return_Params(s *capnp.Segment) (Neighbor_Returner_return_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Neighbor_Returner_return_Params{st}, err
}

func ReadRootNeighbor_Returner_return_Params(msg *capnp.Message) (Neighbor_Returner_return_Params, error) {
	root, err := msg.Root()
	return Neighbor_Returner_return_Params{root.Struct()}, err
}

func (s Neighbor_Returner_return_Params) String() string {
	str, _ := text.Marshal(0xa032e07a3902231b, s.Struct)
	return str
}

func (s Neighbor_Returner_return_Params) N() Neighbor {
	p, _ := s.Struct.Ptr(0)
	return Neighbor{Client: p.Interface().Client()}
}

func (s Neighbor_Returner_return_Params) HasN() bool {
	return s.Struct.HasPtr(0)
}

func (s Neighbor_Returner_return_Params) SetN(v Neighbor) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// Neighbor_Returner_return_Params_List is a list of Neighbor_Returner_return_Params.
type Neighbor_Returner_return_Params_List struct{ capnp.List }

// NewNeighbor_Returner_return_Params creates a new list of Neighbor_Returner_return_Params.
func NewNeighbor_Returner_return_Params_List(s *capnp.Segment, sz int32) (Neighbor_Returner_return_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Neighbor_Returner_return_Params_List{l}, err
}

func (s Neighbor_Returner_return_Params_List) At(i int) Neighbor_Returner_return_Params {
	return Neighbor_Returner_return_Params{s.List.Struct(i)}
}

func (s Neighbor_Returner_return_Params_List) Set(i int, v Neighbor_Returner_return_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Neighbor_Returner_return_Params_List) String() string {
	str, _ := text.MarshalList(0xa032e07a3902231b, s.List)
	return str
}

// Neighbor_Returner_return_Params_Future is a wrapper for a Neighbor_Returner_return_Params promised by a client call.
type Neighbor_Returner_return_Params_Future struct{ *capnp.Future }

func (p Neighbor_Returner_return_Params_Future) Struct() (Neighbor_Returner_return_Params, error) {
	s, err := p.Future.Struct()
	return Neighbor_Returner_return_Params{s}, err
}

func (p Neighbor_Returner_return_Params_Future) N() Neighbor {
	return Neighbor{Client: p.Future.Field(0, nil).Client()}
}

type Neighbor_Returner_return_Results struct{ capnp.Struct }

// Neighbor_Returner_return_Results_TypeID is the unique identifier for the type Neighbor_Returner_return_Results.
const Neighbor_Returner_return_Results_TypeID = 0xa56d8cd9f2bd45a4

func NewNeighbor_Returner_return_Results(s *capnp.Segment) (Neighbor_Returner_return_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Neighbor_Returner_return_Results{st}, err
}

func NewRootNeighbor_Returner_return_Results(s *capnp.Segment) (Neighbor_Returner_return_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Neighbor_Returner_return_Results{st}, err
}

func ReadRootNeighbor_Returner_return_Results(msg *capnp.Message) (Neighbor_Returner_return_Results, error) {
	root, err := msg.Root()
	return Neighbor_Returner_return_Results{root.Struct()}, err
}

func (s Neighbor_Returner_return_Results) String() string {
	str, _ := text.Marshal(0xa56d8cd9f2bd45a4, s.Struct)
	return str
}

// Neighbor_Returner_return_Results_List is a list of Neighbor_Returner_return_Results.
type Neighbor_Returner_return_Results_List struct{ capnp.List }

// NewNeighbor_Returner_return_Results creates a new list of Neighbor_Returner_return_Results.
func NewNeighbor_Returner_return_Results_List(s *capnp.Segment, sz int32) (Neighbor_Returner_return_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Neighbor_Returner_return_Results_List{l}, err
}

func (s Neighbor_Returner_return_Results_List) At(i int) Neighbor_Returner_return_Results {
	return Neighbor_Returner_return_Results{s.List.Struct(i)}
}

func (s Neighbor_Returner_return_Results_List) Set(i int, v Neighbor_Returner_return_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Neighbor_Returner_return_Results_List) String() string {
	str, _ := text.MarshalList(0xa56d8cd9f2bd45a4, s.List)
	return str
}

// Neighbor_Returner_return_Results_Future is a wrapper for a Neighbor_Returner_return_Results promised by a client call.
type Neighbor_Returner_return_Results_Future struct{ *capnp.Future }

func (p Neighbor_Returner_return_Results_Future) Struct() (Neighbor_Returner_return_Results, error) {
	s, err := p.Future.Struct()
	return Neighbor_Returner_return_Results{s}, err
}

type Neighbor_walk_Params struct{ capnp.Struct }

// Neighbor_walk_Params_TypeID is the unique identifier for the type Neighbor_walk_Params.
const Neighbor_walk_Params_TypeID = 0xd9a56012f5234db6

func NewNeighbor_walk_Params(s *capnp.Segment) (Neighbor_walk_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Neighbor_walk_Params{st}, err
}

func NewRootNeighbor_walk_Params(s *capnp.Segment) (Neighbor_walk_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Neighbor_walk_Params{st}, err
}

func ReadRootNeighbor_walk_Params(msg *capnp.Message) (Neighbor_walk_Params, error) {
	root, err := msg.Root()
	return Neighbor_walk_Params{root.Struct()}, err
}

func (s Neighbor_walk_Params) String() string {
	str, _ := text.Marshal(0xd9a56012f5234db6, s.Struct)
	return str
}

func (s Neighbor_walk_Params) R() Neighbor_Returner {
	p, _ := s.Struct.Ptr(0)
	return Neighbor_Returner{Client: p.Interface().Client()}
}

func (s Neighbor_walk_Params) HasR() bool {
	return s.Struct.HasPtr(0)
}

func (s Neighbor_walk_Params) SetR(v Neighbor_Returner) error {
	if !v.Client.IsValid() {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

func (s Neighbor_walk_Params) Depth() uint8 {
	return s.Struct.Uint8(0)
}

func (s Neighbor_walk_Params) SetDepth(v uint8) {
	s.Struct.SetUint8(0, v)
}

// Neighbor_walk_Params_List is a list of Neighbor_walk_Params.
type Neighbor_walk_Params_List struct{ capnp.List }

// NewNeighbor_walk_Params creates a new list of Neighbor_walk_Params.
func NewNeighbor_walk_Params_List(s *capnp.Segment, sz int32) (Neighbor_walk_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Neighbor_walk_Params_List{l}, err
}

func (s Neighbor_walk_Params_List) At(i int) Neighbor_walk_Params {
	return Neighbor_walk_Params{s.List.Struct(i)}
}

func (s Neighbor_walk_Params_List) Set(i int, v Neighbor_walk_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Neighbor_walk_Params_List) String() string {
	str, _ := text.MarshalList(0xd9a56012f5234db6, s.List)
	return str
}

// Neighbor_walk_Params_Future is a wrapper for a Neighbor_walk_Params promised by a client call.
type Neighbor_walk_Params_Future struct{ *capnp.Future }

func (p Neighbor_walk_Params_Future) Struct() (Neighbor_walk_Params, error) {
	s, err := p.Future.Struct()
	return Neighbor_walk_Params{s}, err
}

func (p Neighbor_walk_Params_Future) R() Neighbor_Returner {
	return Neighbor_Returner{Client: p.Future.Field(0, nil).Client()}
}

type Neighbor_walk_Results struct{ capnp.Struct }

// Neighbor_walk_Results_TypeID is the unique identifier for the type Neighbor_walk_Results.
const Neighbor_walk_Results_TypeID = 0xa6104d9ae8231b62

func NewNeighbor_walk_Results(s *capnp.Segment) (Neighbor_walk_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Neighbor_walk_Results{st}, err
}

func NewRootNeighbor_walk_Results(s *capnp.Segment) (Neighbor_walk_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Neighbor_walk_Results{st}, err
}

func ReadRootNeighbor_walk_Results(msg *capnp.Message) (Neighbor_walk_Results, error) {
	root, err := msg.Root()
	return Neighbor_walk_Results{root.Struct()}, err
}

func (s Neighbor_walk_Results) String() string {
	str, _ := text.Marshal(0xa6104d9ae8231b62, s.Struct)
	return str
}

// Neighbor_walk_Results_List is a list of Neighbor_walk_Results.
type Neighbor_walk_Results_List struct{ capnp.List }

// NewNeighbor_walk_Results creates a new list of Neighbor_walk_Results.
func NewNeighbor_walk_Results_List(s *capnp.Segment, sz int32) (Neighbor_walk_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Neighbor_walk_Results_List{l}, err
}

func (s Neighbor_walk_Results_List) At(i int) Neighbor_walk_Results {
	return Neighbor_walk_Results{s.List.Struct(i)}
}

func (s Neighbor_walk_Results_List) Set(i int, v Neighbor_walk_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s Neighbor_walk_Results_List) String() string {
	str, _ := text.MarshalList(0xa6104d9ae8231b62, s.List)
	return str
}

// Neighbor_walk_Results_Future is a wrapper for a Neighbor_walk_Results promised by a client call.
type Neighbor_walk_Results_Future struct{ *capnp.Future }

func (p Neighbor_walk_Results_Future) Struct() (Neighbor_walk_Results, error) {
	s, err := p.Future.Struct()
	return Neighbor_walk_Results{s}, err
}

const schema_e71ccb83a9b1b95a = "x\xda\x8cR?k\x14A\x1c}of\xf6V\x12$" +
	"\x99\xcc\x81H\x14\x91\x0b\xa2b\x0e\x8dZ\x98&i$" +
	" Dn\x026\xa9\xbc\xd3\xc5\x13\xef.\xc7\xee\x86\x03" +
	"[\xc1\xcaO`e\x82\x11RD\xd0B\xb8\"\xad\x8d" +
	"X\x08\x82\x04\x1b;C\xca\x80\x95\xc5\xc8\xec\xb9\x9b\xc5" +
	"B\xd2\x0d\xfc\x1e\xef\xefL~_\x14\xd7\x82\x81\x04\xec" +
	"\xc5\xa0\xe2\xa6k\xe2\xd6\xd3\x1fs\xaf\xa0\xcf\x12\x08\x18" +
	"\x02\xd77\xb8J\xd0\xecp\x01t\xafo\xef\x1e\xee\xbd" +
	"\xe8n\x8d\x00\xca\xdf?\xb3E(\xd7\x9a\xae\xed\xbf\\" +
	"\x9e|\x03]\xcd/C\x8e\xf9\xcb\xe6\xfb\xb1\xb7\xe3\x17" +
	"\xf6\xbfBW\xa5\xfb\xfd\xed\xe3\xcd\x83\xc3\xe7?\x01\x9a" +
	"\x0d\x1e\x98\x1d\xafa\xb6\xb9d\xbe\xf8\x97\xfb\xb0\\\xfb" +
	"5u\x7fk\x0f\xb6\xca\xc2\xc2\x90\xc2[\xd8\xe5\x00<" +
	"b\xd0\xe3\xd2\xad\x0e\xdfm?\xfbt&\xa3;-6" +
	"\xcdyq\x0a0\xb3b\xc9\xdc\x13!\xae\xb8n\x94\xb4" +
	"\xeb\x0f\x9a}\xd5\xeb\xcf\xdf\x8d\x1e?j\xb7\xd6\xe2\xfa" +
	"J\x94\xae\xc7\xbd(\xae\xc7\xd9c\xa6\xd1\x8c\x9b\xb2\x9b" +
	"X%\x15\xa0\x08\xe8\x93S\x80=!i\xab\x82\xecQ" +
	"\x97mS\x83\xc7\xe3]\x89\x92\xf5\xb0\x93&\x05Z\x96" +
	"\xd1\x83f\xe7I\x06\xe9\xa4\x09P`\xc4\xbf\x8c\x13\x9e" +
	"\xb2AZ%\x03\xa0\x98\x88\xf9\x14Z\xcfC\xe8 \\" +
	"\x18\xa9.\xb2A\xfeG\xd1\x87\xed&>]\x1e\xf6\x92" +
	"\x0f;#i\xaf\x0a\x92Y\xedzv\xce\xff\x08I{" +
	"C\x901\xf5\xd1\x88\xa3\x02\xce=\x8c\xfai\x9b\x15\x08" +
	"VJu0\x97\x0b[k\xb1Udi|\xdeqy" +
	"A\x00\xfe\xa6\xc9\xe7f\xfe}\xb4\xbe\x9c\xa5\x99\xf0f" +
	"\xb3,\x7f\x02\x00\x00\xff\xff\x0f\xec\xc4\xe4"

func init() {
	schemas.Register(schema_e71ccb83a9b1b95a,
		0xa032e07a3902231b,
		0xa56d8cd9f2bd45a4,
		0xa6104d9ae8231b62,
		0xd4e8260bae0ab2a2,
		0xd9a56012f5234db6,
		0xe786f2ea35c6d7fb)
}
